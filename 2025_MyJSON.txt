import java.util.*;
import java.io.*;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class MyJSON {

	// JsonObject : {  }
	// JsonArray  : [  ]

	// {"aaa.10":"a11","bbb.20":"b21","ccc.30":"c31"}
	public void doReadJsonString()
	{
		String strJson = "{\"aaa.10\":\"a11\",\"bbb.20\":\"b21\",\"ccc.30\":\"c31\"}";
		JsonElement je = JsonParser.parseString(strJson);
		JsonObject jb = je.getAsJsonObject();
		Set<String> ss = jb.keySet();
		for (String key : ss) {
			System.out.println("key : " + key);
			System.out.println("value : " + jb.get(key));
		}
	}
	
	// {"aaa.10": ["a11", "a12"], "bbb.20": ["b21"], "ccc.30": ["c31", "c32", "c33"]}
	public void doReadJsonListString()
	{
		HashMap<String, List<String>> hMap = new LinkedHashMap<String, List<String>> ();
		String strJson = "{\"aaa.10\": [\"a11\", \"a12\"], \"bbb.20\": [\"b21\"], \"ccc.30\": [\"c31\", \"c32\", \"c33\"]}";
		JsonElement je = JsonParser.parseString(strJson);
		JsonObject jb = je.getAsJsonObject();
		Set<String> ss = jb.keySet();
		for (String key : ss) {
			List<String> listTemp = new ArrayList<String>();
			//System.out.println("key : " + key);
			//System.out.println("value : " + jb.get(key));
			JsonArray ja = (JsonArray) jb.get(key);
			for (int i=0; i<ja.size(); i++) {
				String strTemp = ja.get(i).getAsString();
				listTemp.add(strTemp);
			}
			hMap.put(key, listTemp);			
		}		
		
		for (Entry<String, List<String>> entry : hMap.entrySet()) { // LinkedHashMap
			String strKey = entry.getKey();
			System.out.println("key : " + strKey);
			List<String> listValue = entry.getValue();
			for (int i=0; i<listValue.size(); i++) {
				System.out.println("Value : " + listValue.get(i));
			}
		}
	}

	// {"aaa.10":"a11","bbb.20":"b21","ccc.30":"c31"}
	public void doMakeJsonString()
	{
		// 입력한 순서를 보장하려면 LinkedHashMap을 사용해야 한다.
		HashMap<String, String> m = new LinkedHashMap<String, String> ();
		// {"aaa.10":"a11","bbb.20":"b21","ccc.30":"c31"}
		m.put("aaa.10", "a11");
		m.put("bbb.20", "b21");
		m.put("ccc.30", "c31");
		JsonObject jsObj = new JsonObject();
		makeJsonString(jsObj, m);
		System.out.println(jsObj.toString());
	}
	
	// {"aaa.10": ["a11", "a12"], "bbb.20": ["b21"], "ccc.30": ["c31", "c32", "c33"]}
	public void doMakeJsonStringList()
	{
		// 입력한 순서를 보장하려면 LinkedHashMap을 사용해야 한다.
		HashMap<String, List<String>> m = new LinkedHashMap<String, List<String>> ();
		
		// {"aaa.10": ["a11", "a12"], "bbb.20": ["b21"], "ccc.30": ["c31", "c32", "c33"]}
		List<String> listData1 = new ArrayList<String>();
		listData1.add("a11");
		listData1.add("a12");
		m.put("aaa.10", listData1);

		List<String> listData2 = new ArrayList<String>();
		listData2.add("b21");
		m.put("bbb.20", listData2);

		List<String> listData3 = new ArrayList<String>();
		listData3.add("c31");
		listData3.add("c32");
		listData3.add("c33");
		m.put("ccc.30", listData3);
		
		System.out.println(m);
		
		JsonObject jsObj = new JsonObject();
		makeJsonListString(jsObj, m);
		System.out.println(jsObj.toString());
	}
	
	//	{
	//	"modelname": "cinema review",
	//	"classes": [
	//		{
	//			"code": "fer34r3",
	//			"value": "positive"
	//		},
	//		{
	//			"code": "7jji95r",
	//			"value": "positive"
	//		}
	//	],
	//	"url": "http://127.0.0.1:9010"
	//}
	public void doMakeJsonObjectList()
	{
		JsonObject jobjModels = new JsonObject();
		
		// 1. "modelname": "cinema review",
		jobjModels.addProperty("modelname", "cinema review");
	
		// [{"code": "fgr44323","value": "positive"}, {"code": "3kuygh9","value": "positive"}]
		JsonArray ja1 = new JsonArray();
		// {"code": "fgr44323","value": "positive"}
		HashMap<String, String> m1 = new LinkedHashMap<String, String> ();
		m1.put("code", "fgr44323");
		m1.put("value", "positive");
		JsonObject jsObj1 = new JsonObject();
		makeJsonString(jsObj1, m1);
		ja1.add(jsObj1);		
		// {"code": "3kuygh9","value": "positive"}
		m1.clear();
		m1.put("code", "3kuygh9");
		m1.put("value", "positive");
		JsonObject jsObj2 = new JsonObject();
		makeJsonString(jsObj2, m1);
		ja1.add(jsObj2);
		
		// 2. "classes": [{"code": "fgr44323","value": "positive"}, {"code": "3kuygh9","value": "positive"}]
		jobjModels.add("classes", ja1);
	
		// 3. "url": "http://127.0.0.1:9010"
		jobjModels.addProperty("url", "http://127.0.0.1:9010");
				
		System.out.println(jobjModels.toString());
		return;
	}
	
	
	public void makeJsonString(JsonObject jsObj, HashMap<String, String> hMap)
	{
		
		// {"aaa.10":"a11","bbb.20":"b21","ccc.30":"c31"}
		for (Entry<String, String> entry : hMap.entrySet()) { // LinkedHashMap
			String strKey = entry.getKey();
			String strValue = entry.getValue();
			jsObj.addProperty(strKey, strValue);
		}
		return;
	}
	
	public void makeJsonListString(JsonObject jsObj, HashMap<String, List<String>> hMap)
	{
		// {"aaa.10": ["a11", "a12"], "bbb.20": ["b21"], "ccc.30": ["c31", "c32", "c33"]}
		for (Entry<String, List<String>> entry : hMap.entrySet()) { // LinkedHashMap
			String strKey = entry.getKey();
			List<String> listValue = entry.getValue();
			JsonArray ja = new JsonArray();
			for (int i=0; i<listValue.size(); i++) {
				ja.add(listValue.get(i));
			}
			jsObj.add(strKey, ja);
		}
		return;
	}
	


	// File : test.json 
	//{
	//	"aaa.10": ["a11", "a12"],
	//	"bbb.20": ["b21"],
	//	"ccc.30": ["c31", "c32", "c33"]
	//}
	// key에 "." 문자가 들어 있는 경우 사용(Class 멤버변수(aaa.10)로 "." 사용 못하기 때문)
    	public void makeHashMapFromJSonFile1(HashMap<String, List<String>> hMap) {
		String line = null;
		String strJson = "";
		// read json file
		try {
			FileReader fReader = new FileReader("./test.json");
			BufferedReader bReader = new BufferedReader(fReader);
			while ((line = bReader.readLine()) != null) {
			strJson += line;
		}
			bReader.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		//System.out.println(strJson);

		// get key list
		JsonElement je = JsonParser.parseString(strJson);
		JsonObject jb = je.getAsJsonObject();
		Set<String> ss = jb.keySet();
		for (String key : ss) {
			List<String> listTemp = new ArrayList<String>();
			//System.out.println("key : " + key);
			//System.out.println("value : " + jb.get(key));
			JsonArray ja = (JsonArray) jb.get(key);
			for (int i=0; i<ja.size(); i++) {
				String strTemp = ja.get(i).getAsString();
				listTemp.add(strTemp);
			}
			hMap.put(key, listTemp);			
		}
	}
	public testMakeHashMapFromJSonFile1() {
		HashMap<String, List<String>> hMap = new HashMap<String, List<String>> ();
		makeHashMapFromJSonFile1(hMap);
		for (String key : hMap.keySet()) {
			List<String> listTemp = hMap.get(key);
			for (int i=0; i<listTemp.size(); i++) {
				System.out.println("Value : " + listTemp.get(i));	
			}
		}
	}

	// {"result":"aaa"}
	public String getResultJSON(String strJSON) {
		JsonElement je = JsonParser.parseString(strJSON);
		String strRes = JsonElement.getAsJsonObject().get("result").getAsString();
		return strRes;
	}

	// com.google.gson.JsonArray  : [{String name1:String value1}, {String name2:String value2}, ... ]
	// com.google.gson.JsonObject : {String name1:String value1, String name2:String value2}, ... }
	public String makeJSON1(String name, String value) {
		JsonObject jsObj = new JsonObject();
		jsObj.addProperty(name, value);
		return jsObj.toString();	
	}

	// {String name:[String data1, String data2, ..... ]}
	public String makeJSON2(List<String> listData) {
		CData1 cd1 = new CData1();
		cd1.setListData1(listData);
		String strJSON = new Gson().toJson(cd1);
		return strJSON;
	}
	
	public String getModelName(String strJSON) {
		Gson gson = new Gson();
		CData2 cd2 = gson.fromJson(strJSON, CData2.class);
		return cd2.getModelName();
	}
	
	public List<String> getQueries(String strJSON) {
		Gson gson = new Gson();
		CData2 cd2 = gson.fromJson(strJSON, CData2.class);
		return cd2.getQueries();
	}
	
	public CModel loadCModel(String fname) {
		Gson gson = new Gson();
		Reader rd = null;
		CModel model = null;
		// read json file
		try {
			rd = new FileReader(fname);
			model = gson.fromJson(rd, CModel.class);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} 
		return model;	
	}
	
	public void printCModel(CModel cModel) {
		List<Modles> lstModel = cModel.getModels();
		for (int i=0l i<lstModel.size(); i++) {
			Modles models = lstModel.get(i);
			List<Classes> lstClasses = models.getClasses();
			for (int j=0; j<lstClasses.size(); j++) {
				Classes clas = lstClasses.get(j);
				System.out.println("code : " + clas.getCode());
				System.out.println("value : " + clas.getValue());
			}
			System.out.println("URL : " + models.getURL());	
		}
	}
	
	public String getValueCModel(CModel cModel, String strModelName, String strCode) {
		List<Modles> lstModel = cModel.getModels();
		for (int i=0l i<lstModel.size(); i++) {
			Modles models = lstModel.get(i);
			if (models.getModelName().equals(strModelName)) {
				List<Classes> lstClasses = models.getClasses();
				for (int j=0; j<lstClasses.size(); j++) {
					Classes clas = lstClasses.get(j);
					if (clas.getCode().equals(strCode)) {
						return clas.getValue();
					}
				}
			}
		}
		return null;
	}

	public String getUrlCModel(CModel cModel, String strModelName) {
		List<Modles> lstModel = cModel.getModels();
		for (int i=0l i<lstModel.size(); i++) {
			Modles models = lstModel.get(i);
			if (models.getModelName().equals(strModelName)) {
				return models.getURL();
			}
		}
		return null;	
	}
}

// {String name:[String data1, String data2, ....]}
class CData1 {
	private List<String> results; // String name : results, data : List Data
	
	public List<String> getListData1() {
		return this.results;
	}
	public void setListData1(List<String> data) {
		this.results = data;
	}
}

// {"modelname":"aaa", "queries";["bbb", "ccc"]}
class CData2 {
	private String modelname;
	private List<String> queries;
	
	public String getModelName() {
		return this.modelname;
	}
	public List<String> getQueries() {
		return this.queries;
	}
	public void setModelname(Strig strData) {
		this.modelname = strData;
	}
	public void setQueries(List<Strig> lstData) {
		this.queries = lstData;
	}
}

/*
	{
		"models": [
			{
				"modelname": "cinema review",
				"classes": [
					{
						"code": "fer34r3",
						"value": "positive"
					},
					{
						"code": "7jji95r",
						"value": "positive"
					}
				],
				"url": "http://127.0.0.1:9010"
			},
			{
				"modelname": "cinema review",
				"classes": [
					{
						"code": "fgr44323",
						"value": "positive"
					},
					{
						"code": "3kuygh9",
						"value": "positive"
					}
				],
				"url": "http://127.0.0.1:9010"			
			}
		]
	}
*/
Class CModel {
	private List<Models> modles;
	
	public List<Models> getModels() {return this.modles};
}
Class Models {
	private String modelname;
	private List<Classes> classes;
	private String url;
	
	public Strig getModelName() {return this.modelname};
	public List<Classes> getClasses() {return this.classes};
	public Strig getURL() {return this.url};
	
}
Class Classes {
	private String code;
	private String value;
	
	public Strig getCode() {return this.code};
	public Strig getValue() {return this.value};
}

