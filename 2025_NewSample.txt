import java.util.*;
import java.io.*;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import org.eclipse.jetty.http.HttpHeader;
import org.eclipse.jetty.http.HttpMethod;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.client.api.ContentResponse;
import org.eclipse.jetty.client.api.Request;
import org.eclipse.jetty.client.util.StringContentProvider;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.servlet.ServletHandler;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

{ //Scanner
	Scanner sc = new Scanner(System.in);
	while(true) {
		String line = sc.nextLine();
		line.substring(0, 8); // [0] ~ [7]
		pwd = line.substring(8); // [8] ~ [end]
		String arrTemp[] = line.split("#"); // arrTemp[0],arrTemp[1], ... 
	}
}

{ // List
	List<String> al = new ArrayList<String>();
	for (int i=0; i<al.size(); i++) {String data = al.get(i);}
	System.out.println(al.toString());
}

{ // MAP
	HashMap<String, String> hMap = new LinkedHashMap<String, String> (); // LinkedHashMap : 입력한 순서 보장
	hm.put(key, value);
	for (Entry<String, String> entry : hMap.entrySet()) { // LinkedHashMap
		String strKey = entry.getKey();
		String strValue = entry.getValue();
	}

	HashMap<String, String> m = new HashMap<String, String> (); // 입력한 순서 미보장
	for (String keyTemp : m.keySet()) { String strValue = m.get(keyTemp);  }
}

{ // File
	try {   // read file
		FileReader fReader = new FileReader(fileName);
		BufferedReader bReader = new BufferedReader(fReader);
		//BufferedReader reader = new BufferedReader(new FileReader("./file.txt", Charset.forName("UTF-8"))); // java11 이후 : 인코딩 지정해서 텍스트 읽기 
		//BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("./file.txt"), "UTF-8")); // java11 이전 : 인코딩 지정해서 텍스트 읽기
		String strData = "";
		while ((String line = bReader.readLine()) != null) { strData += line; }
		bReader.close();
	} catch (FileNotFoundException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}

	try {   // write file
		FileWriter fw = new FileWriter(fileName);
		//FileWriter fw = new FileWriter(fileName, true); // 기존 파일에 새로운 내용 추가하기 : 파일명 뒤에 추가모드(append)를 true로 한다.
		fw.write(strData);
		fw.close();
	} catch (IOException e) {
		e.printStackTrace();
	}
}

{ // JSON      // JsonObject : {  }     // JsonArray  : [  ]
	// read json
	String strJson = "{\"aaa.10\":\"a11\",\"bbb.20\":\"b21\",\"ccc.30\":\"c31\"}"; 
	JsonElement je = JsonParser.parseString(strJson);
	JsonObject jo = je.getAsJsonObject();
	Set<String> ss = jo.keySet();
	for (String key : ss) { String value = jo.get(key); } // {\"aaa.10\":\"a11\",\"bbb.20\":\"b21\",\"ccc.30\":\"c31\"}
	for (String key : ss) {  // {"aaa.10": ["a11", "a12"], "bbb.20": ["b21"], "ccc.30": ["c31", "c32", "c33"]}
		JsonArray ja = jo.get(key).getAsJsonArray; 
		for (int i=0; i<ja.size(); i++) {  String strTemp = ja.get(i).getAsString(); }
	}

	// make json
	JsonObject jobj = new JsonObject();
	jobj.addProperty("modelname", "cinema review");
	JsonArray ja = new JsonArray();
	ja.add("ja111"); // add String
	ja.add("ja222"); // add String
	jobj.add("classes", ja); // add JsonElement(JsonObject or JsonArray)
	jobj.addProperty("url", "http://127.0.0.1:9010"); // add String
	String strJSON = jobj.toString(); // json to String
	System.out.println(strJSON);

	// read/write json file
	try {
		// read json file
		String strJson = "";
		FileReader fReader = new FileReader("./test.json");
		BufferedReader bReader = new BufferedReader(fReader);
		while ((String line = bReader.readLine()) != null) { strJson += line; }
		bReader.close();
		JsonElement je = JsonParser.parseString(strJson);
		JsonObject jo = je.getAsJsonObject();
		// write json file
		FileWriter fw = new FileWriter("./aa.json");
		fw.write(jo.toString());
		fw.close();
	} catch (FileNotFoundException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}
}


class MyServer1 extends Thread {
	public void run() {
		Server sv = new Server();
		ServerConnector http = new ServerConnector(sv);
		http.setHost("127.0.0.1");
		http.setPort(8080);
		sv.addConnector(http);
		ServletHandler svHandler = new ServletHandler();
		svHandler.addServletWithMapping(MyServlet1.class, "/*");
		//svHandler.addServletWithMapping(MyServlet1.class, "/mypath");
		sv.setHandler(svHandler);
		try {
			sv.start();
			sv.join();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}// end - run()

	public void quit() {
		try {
			sv.stop();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}//end - quit()
}//end - class MyServer1

class DEVFILE {
  public String device;
  public String hostname;
  public String prot;
}

// java파일로 새로 만들어야 동작 함
class MyServlet1 extends HttpServlet {
	private HashMap<String, String> hmFile1 = null;
	private HashMap<String, DEVFILE> hmFile2 = null;

	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		// "http://127.0.0.1:8080/fileList?id=test"
		String url = req.getRequestURL().toString(); // "http://127.0.0.1:8080/fileList"
		String pathURI = req.getRequestURI(); // "/fileList"
		String query = req.getQueryString(); // "id=test"
		int port = req.getLocalPort();

		if (pathURI.contains("/requestDate")) {
			res.setStatus(200);
			res.getWriter().write(new Date().toString()); // response date
		} else if (pathURI.contains("/requestFileName")) {
			res.setStatus(200);
			res.getWriter().write("aaa.txt"); // response filename
		} else if (pathURI.contains("/requestFile2")) { // 임의의 파일 전송
			File file = new File("../CLIENT/aaa.txt");
			byte[] fileContent = Files.readAllBytes(file.toPath());
			res.setStatus(200);
			ServletOutputStream stream = res.getOutputStream();
			stream.flush();
			stream.write(fileContent);
			stream.flush();
			stream.close();
		} else {
			res.setStatus(200);
			res.getWriter().write("None!!"); // response data
		}
	}//end - doGet()

	protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

		if (hmFile1 == null) {
			m_hMap = new HashMap<String, String> ();
		}

		// "http://127.0.0.1:8080/requestData?id=test"
		String url = req.getRequestURL().toString(); // "http://127.0.0.1:8080/requestData"
		String pathURI = req.getRequestURI(); // "/requestData"
		String query = req.getQueryString(); // "id=test"
		int localPort = req.getLocalPort();
		System.out.println("getContentLength : " + req.getContentLength());
		System.out.println("getContentType : " + req.getContentType());
		System.out.println("getContextPath : " + req.getContextPath());

		// Request Parameter
		List<String> parameterNameList = Collections.list(req.getParameterNames());
		for (String name : parameterNameList) {
			String value = req.getParameter(name);
			System.out.println("Paramter : " + value);
		}

		// Request Header
		Enumeration<String> headers = req.getHeaderNames();
		while(headers.hasMoreElements()) {
			String name = (String)headers.nextElement();
			String value = req.getHeader(name);
			System.out.println("Paramter : " + value);
		} 

​		// Request Body
		BufferedReader input = new BufferedReader(new InputStreamReader(req.getInputStream()));
		String buffer;
		StringBuilder sb = new StringBuilder();
		while ((buffer = input.readLine()) != null) {sb.append(buffer+"\n");}
		String strBody = sb.toString();
		input.close();
		System.out.println("strBody : " + strBody);

		if (pathURI.contains("/requestData")) { 
			File destFolder = new File("../SERVER");
			if (!destFolder.exists()) {destFolder.mkdirs();}
			Gson gson = new Gson();
			JsonObject jObj = gson.fromJson(strBody, JsonObject.class);
			String fileName = jObj.get("FileName").getAsString();
			String fileContent = jObj.get("FileContent").getAsString();
			PrintWriter prnWriter = new PrintWriter(new FileWriter(new File("../SERVER/"+fileName)));
			prnWriter.print(fileContent);
			prnWriter.close();
			res.setStatus(200);
			res.getWriter().write(fileName+" saved."); // response data
		} else if (pathURI.contains("/requestRedirect")) {
			Gson gson = new Gson();
			JsonObject jObj = gson.fromJson(strBody, JsonObject.class);
			String ip = jObj.get("IP").getAsString();
			int port = jObj.get("PORT").getAsInt();
			String fname = "";
			MyClient1 cl = new MyClient1();
			try {
				fname = cl.requestFileName(ip, port);
			} catch (Exception e) {
				e.printStackTrace();
			}
			res.setStatus(HttpServletResponse.SC_OK); //res.setStatus(200);
			res.getWriter().write(fname); // response client-res
		}
	}//end - doPost()

}



